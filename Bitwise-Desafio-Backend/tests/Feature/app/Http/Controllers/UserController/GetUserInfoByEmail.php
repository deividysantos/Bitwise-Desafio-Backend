<?php

namespace Tests\Feature\app\Http\Controllers\UserController;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class GetUserInfoByEmail extends TestCase
{

    use RefreshDatabase;

    public function setUp(): void
    {
        $payload = [
            'userName' => 'user name',
            'name' => 'test',
            'lastName' => 'test',
            'profileImageUrl' => 'https://avatars.githubusercontent.com/u/56976743?v=4',
            'bio' => 'I am a test',
            'email' => 'test@example.com',
            'gender' => 'male'
        ];

        $this->withHeaders(['Accept', 'application/json'])
            ->post(Route('user.create'), $payload);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_should_be_able_request_user_info_by_email()
    {
        $response = $this
            ->withHeaders(['Accept', 'application/json'])
            ->get(Route('user.getByEmail', 'test@example.com'));

        $response->assertStatus(200);

        $response->assertExactJson([
            'message' => 'User found successfully.',
            'data' => [
                'userName',
                'name',
                'lastName',
                'profileImageUrl',
                'bio',
                'email',
                'gender',
                'followers',
                'following',
                'public_repos',
                'url',
            ]
        ]);
    }

    public function test_should_not_be_able_request_user_info_by_wrong_email()
    {
        $response = $this
            ->withHeaders(['Accept', 'application/json'])
            ->get(Route('user.getByEmail', 'test@wrongexample.com'));

        $response->assertStatus(404);

        $response->assertExactJson([
            'message' => 'User not exists.',
        ]);
    }
}
